import { useEffect, useState } from "react"

function usePasteEvent(pasteListener) {
  useEffect(() => {
    document.addEventListener("paste", pasteListener)

    return () => {
      document.removeEventListener("paste", pasteListener)
    }
  }, [])
}

export default function GradeForm() {
  const [formState, setFormState] = useState({ loading: false, data: null, errors: [] })
  usePasteEvent(async (event) => {
    event.preventDefault()
    setFormState((s) => ({ ...s, loading: true, errors: []}))
    const data = event.clipboardData || window.clipboardData;
    const url = data.getData("text");

    if (!url.startsWith("https") || !url.endsWith(".pdf")) {
      setFormState((s) => ({ ...s, errors: [...s.errors, "URL must start with https and end with pdf"]})) 
      return
    }

    try {
      const res = await fetch('/api/grade?url=' + url, {
        method: "POST",
        encType: "multipart/form-data",
      }).then((b) => b.json())
      setFormState((s) => ({ ...s, loading: false, data: res }))
    } catch (err) {
      setFormState((s) => ({ ...s, errors: [...s.errors, err instanceof Error ? err.message : "could not fetch"]})) 
    }

  })

  async function handleFormSubmission(event) {
    const formData = new FormData(event.currentTarget.parentElement)
    setFormState((s) => ({ ...s, loading: true, errors: []}))

    if (formData.has("name")) {
      return;
    }

    try {
      const res = await fetch(event.currentTarget.action, {
        method: "POST",
        encType: "multipart/form-data",
        body: formData
      }).then((b) => b.json())
      setFormState((s) => ({ ...s, loading: false, data: res }))
    } catch (err) {
      setFormState((s) => ({ ...s, errors: [...s.errors, err instanceof Error ? err.message : "could not fetch"]})) 
    }
  }

  function prevent(event) {
    event.preventDefault()
  }

  return (
    <form onSubmit={prevent} method="POST" action="/api/grade" encType="multipart/form-data" className="w-full p-8 border-2 rounded-lg border-gray-800 border-dashed flex items-center justify-center flex-col gap-4">
      <label htmlFor="resume">
        <span className="px-4 py-2 block rounded-xl bg-indigo-800 font-bold hover:bg-indigo-600 cursor-pointer">Browse</span>
      </label>
      <span>or paste a url</span>
      <input className="sr-only" onChange={handleFormSubmission} type="file" id="resume" name="resume" accept=".pdf" />
      {/* honeypot */}
      <input className="sr-only" type="text" name="name" />
      {formState.errors.length ? (
        <div>
          {formState.errors.map((error) => <p key={error} className="text-red-500 mb-2">{error}</p>)}
        </div>
      ) : null}
    </form>
  )
}
